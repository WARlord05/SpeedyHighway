SPEEDY HIGHWAY - RACING GAME DOCUMENTATION
==========================================

OVERVIEW
--------
A 2D racing game built with Pygame featuring enhanced mechanics, multiple difficulty levels, 
achievement system, car unlocking, and persistent game data storage with robust error handling.

ROBUST DATA HANDLING SYSTEM
----------------------------
The game includes a comprehensive data persistence system that automatically handles:

Data File Recovery:
- Automatically detects missing or corrupted game_data.json files
- Creates default data structure if file is deleted or damaged
- Handles JSON parsing errors gracefully
- Provides multiple fallback save locations

Error Handling Features:
- FileNotFoundError: Creates new data file with defaults
- JSONDecodeError: Recovers from corrupted save files
- PermissionError: Uses alternative save locations
- Directory creation: Automatically creates data/ folder if missing

Default Data Structure:
- Empty high scores list
- Normal difficulty setting
- Default car selection
- Basic car unlocked (index 0)
- Reset achievements and statistics
- Fresh daily challenge generation

The system ensures the game always runs, even if:
- Save files are manually deleted
- Data directory is removed
- File permissions prevent saving
- Save file becomes corrupted

DEPLOYMENT AS EXECUTABLE
-------------------------
The game can be converted to a standalone executable (.exe) for easy distribution:

Build Scripts Available:
- build_game.bat: Simple one-click build script
- build_single_exe.bat: Alternative build script
- build_exe.bat: Advanced build using spec file

To create executable:
1. Run build_game.bat
2. Executable will be created in dist/SpeedyHighway.exe
3. The executable is portable and contains all necessary files

Requirements for Building:
- Python 3.13+ with virtual environment
- PyInstaller package
- Pygame package
- All assets (assets/ folder) and data (data/ folder)

The executable includes:
- All game assets bundled internally
- No external dependencies required
- Windowed mode (no console window)
- Portable single-file deployment
- Robust data handling system

EXECUTABLE PATH HANDLING
-------------------------
The game uses a special get_resource_path() function that:
- Detects if running as PyInstaller executable or development mode
- Automatically handles asset and data file paths
- Works correctly when run from any directory
- Supports both development and executable environments

When running as executable:
- Assets are bundled inside the .exe file
- Game data is saved next to the executable
- No external folders needed for distribution
- Automatic data file creation if missing

FILE STRUCTURE
--------------
car.py - Main game file containing all game logic
data/game_data.json - Persistent storage for game progress, scores, and settings
assets/ - Contains all game images (cars, background)

IMPORTS AND DEPENDENCIES
------------------------
- os: Environment variables and file path operations
- random: Random enemy car positioning
- json: Game data persistence
- sys: Proper exit handling for executables
- time.sleep: Unused import (legacy)
- datetime: Daily challenge system and score timestamps
- pygame: Main game framework

ENVIRONMENT SETUP
-----------------
- PYGAME_HIDE_SUPPORT_PROMPT='1': Suppresses pygame welcome message
- SDL_VIDEO_WINDOW_POS='centered': Centers game window on screen

GAME STATES
-----------
- MENU (0): Main menu with options
- PLAYING (1): Active gameplay
- PAUSED (2): Game paused state
- GAME_OVER (3): Game over screen with statistics
- HIGH_SCORES (4): High scores display
- ACHIEVEMENTS (5): Achievement progress display
- CAR_SELECTION (6): Car selection interface

ACHIEVEMENT SYSTEM
------------------
Achievement class stores:
- id: Unique identifier
- name: Display name
- description: What the achievement requires
- condition: Lambda function to check if unlocked
- unlocked: Boolean status

Available Achievements:
1. First Drive: Play your first game
2. Road Warrior: Score 1000 points
3. Highway Legend: Score 5000 points
4. Close Call: Get 10 near misses in one game
5. Lane Master: Change lanes 50 times in one game
6. Survivor: Survive for 2 minutes
7. Speed Demon: Reach maximum speed (varies by difficulty)
8. Speed God: Reach 40 speed in Insane difficulty
9. Perfect Game: Complete daily challenge

GAME MECHANICS
--------------

Scoring System:
- Base Score: Survival time (frame count)
- Near Miss Bonus: 10 points per near miss
- Lane Change Bonus: 2 points per lane change
- Survival Bonus: 50 points per 10 seconds survived
- Difficulty Multiplier: Easy(1.0), Normal(1.2), Hard(1.5), Insane(2.0)

Near Miss Detection:
- Triggered when enemy car is within 60 pixels horizontally and 120 pixels vertically
- Uses enemy_car_near_miss_counted flag to prevent double counting
- Visual feedback with green flash for 30 frames (0.5 seconds)
- Resets when enemy car passes beyond player position

Input System:
- Continuous input handling with frame-based timing
- Immediate response on first key press (0 frame delay)
- Repeat delay of 12 frames for held keys
- Tracks key state between frames to prevent over-sensitivity

Lane System:
- 4 lanes at positions: 240, 320, 440, 520 pixels
- Out of bounds positions: 200 (left) and 560 (right) trigger crash
- Lane changes counted for scoring and achievements

Difficulty Levels:
- Easy: 0.7x speed multiplier, max enemy speed 10, max bg speed 7
- Normal: 1.0x speed multiplier, max enemy speed 15, max bg speed 12
- Hard: 1.3x speed multiplier, max enemy speed 18, max bg speed 15
- Insane: 1.6x speed multiplier, unlimited speed increase

Car System:
- 4 available cars: Default, Blue Racer, Red Speed, Yellow Lightning
- Cars unlock based on score: Blue(500), Red(1500), Yellow(3000)
- Selection saved to persistent data

VISUAL ELEMENTS
---------------

Display Settings:
- Window size: 800x600 pixels
- Frame rate: 60 FPS for responsive input
- Colors defined as RGB tuples

Background:
- Scrolling road background scaled to full display
- Dual image system prevents gaps during scrolling
- Speed increases with difficulty and game progression

HUD Elements:
- Score display (top-left)
- Bonus score in yellow
- Near miss counter with flash effect
- Lane change counter in blue
- Speed indicator in red (top-right)
- Difficulty display
- Survival time in seconds

Pause System:
- Semi-transparent overlay (alpha 128)
- Countdown timer (3,2,1) when resuming
- Auto-pause on window focus loss
- Resume by ESC key or mouse click

GAME DATA PERSISTENCE
---------------------

JSON Structure:
- high_scores: Array of top 10 scores with metadata
- difficulty: Current selected difficulty (0-3)
- selected_car: Currently selected car index
- unlocked_cars: Array of unlocked car indices
- achievements: Object mapping achievement IDs to unlock status
- games_played: Total games counter
- total_playtime: Cumulative survival time
- best_streak: Best consecutive performance (unused)
- last_daily_challenge: Date string for daily challenge reset
- highest_difficulty_reached: Maximum difficulty player has used
- best_scores_per_difficulty: Array of best scores for each difficulty

Daily Challenge System:
- Regenerates daily based on date
- Challenge types: score target, survival time, near miss count, lane change count
- Completion tracked and displayed with checkmark
- Contributes to Perfect Game achievement

COLLISION DETECTION
-------------------
- Rectangle-based collision between player and enemy car
- Checks both horizontal and vertical overlap
- Enhanced precision with exact pixel boundaries
- Out-of-bounds detection for lane system

SPEED PROGRESSION
-----------------
- Speed increases every 100 frames (approximately 1.67 seconds at 60 FPS)
- Difficulty-specific maximum speeds prevent overwhelming gameplay
- Background and enemy car speeds increase together

EVENT HANDLING
--------------

Menu Events:
- SPACE: Start game
- H: High scores
- A: Achievements
- C: Car selection
- D: Cycle difficulty
- ESC: Quit (uses sys.exit() for executable compatibility)

Game Events:
- LEFT/RIGHT: Lane movement with continuous input
- ESC: Pause/unpause toggle
- Mouse click: Resume from pause
- Window focus loss: Auto-pause

Car Selection Events:
- LEFT/RIGHT: Navigate available cars
- SPACE: Confirm selection
- ESC: Return to menu

TECHNICAL NOTES
---------------

Executable Compatibility:
- Uses sys.exit() instead of exit() for proper executable termination
- Relative asset paths for portability
- Environment variables set before pygame import

Performance Optimizations:
- 60 FPS frame rate for smooth gameplay
- Efficient collision detection
- Minimal file I/O (only on game end and settings change)
- Optimized drawing order and overlay systems

Code Structure:
- Object-oriented design with single CarRacing class
- State machine pattern for game flow
- Separation of concerns (display, logic, data)
- Modular method organization

File Organization:
- Relative paths for cross-platform compatibility
- Centralized asset loading in initialize() method
- Separate data folder for game persistence
- Clean separation of code and assets

CONTROLS REFERENCE
------------------
Main Menu:
- SPACE: Start Game
- H: View High Scores
- A: View Achievements
- C: Car Selection
- D: Change Difficulty
- ESC: Quit Game

In Game:
- LEFT/RIGHT ARROWS: Change lanes
- ESC: Pause/Resume
- MOUSE CLICK: Resume from pause

Car Selection:
- LEFT/RIGHT ARROWS: Browse cars
- SPACE: Select car
- ESC: Back to menu

Other Screens:
- ESC: Return to main menu
- SPACE: Return to menu (game over screen)
